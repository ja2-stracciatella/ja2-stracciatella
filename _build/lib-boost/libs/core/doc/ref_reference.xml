<?xml version="1.0" standalone="yes"?>
<library-reference><header name="boost/core/ref.hpp">
<namespace name="boost">
<class name="reference_wrapper"><template>
      <template-type-parameter name="T"/>
    </template><purpose>Contains a reference to an object of type `T`. </purpose><description><para>`reference_wrapper` is primarily used to "feed" references to function templates (algorithms) that take their parameter by value. It provides an implicit conversion to `T&amp;`, which usually allows the function templates to work on references unmodified. </para></description><typedef name="type"><description><para>Type `T`. </para></description><type>T</type></typedef>
<method-group name="public member functions">
<method name="conversion-operator" cv="const"><type>T &amp;</type><description><para>
<para>Does not throw. </para>
</para></description><returns><para>The stored reference. </para></returns></method>
<method name="get" cv="const"><type>T &amp;</type><description><para>
<para>Does not throw. </para>
</para></description><returns><para>The stored reference. </para></returns></method>
<method name="get_pointer" cv="const"><type>T *</type><description><para>
<para>Does not throw. </para>
</para></description><returns><para>A pointer to the object referenced by the stored reference. </para></returns></method>
</method-group>
<constructor specifiers="explicit"><parameter name="t"><paramtype>T &amp;</paramtype></parameter><description><para>Constructs a `reference_wrapper` object that stores a reference to `t`.</para><para><para>Does not throw. </para>
</para></description></constructor>
<constructor><parameter name="t"><paramtype>T &amp;&amp;</paramtype></parameter><description><para><para>Construction from a temporary object is disabled. </para>
</para></description></constructor>
</class><struct name="is_reference_wrapper"><template>
      <template-type-parameter name="T"/>
    </template><purpose>Determine if a type `T` is an instantiation of `reference_wrapper`. </purpose><description><para>The value static constant will be true if the type `T` is a specialization of `reference_wrapper`. </para></description><data-member name="value" specifiers="static"><type>constexpr bool</type></data-member>
</struct><struct name="unwrap_reference"><template>
      <template-type-parameter name="T"/>
    </template><purpose>Find the type in a `reference_wrapper`. </purpose><description><para>The `typedef` type is `T::type` if `T` is a `reference_wrapper`, `T` otherwise. </para></description><typedef name="type"><type>T</type></typedef>
</struct><function name="ref"><type><classname>reference_wrapper</classname>&lt; T &gt; const</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="t"><paramtype>T &amp;</paramtype></parameter><description><para>
<para>Does not throw. </para>
</para></description><returns><para>`reference_wrapper&lt;T&gt;(t)` </para></returns></function>
<function name="cref"><type><classname>reference_wrapper</classname>&lt; T const  &gt; const</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="t"><paramtype>T const &amp;</paramtype></parameter><description><para>
<para>Does not throw. </para>
</para></description><returns><para>`reference_wrapper&lt;T const&gt;=""&gt;(t)` </para></returns></function>
<function name="ref"><type>void</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name=""><paramtype>T const &amp;&amp;</paramtype></parameter><description><para><para>Construction from a temporary object is disabled. </para>
</para></description></function>
<function name="cref"><type>void</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name=""><paramtype>T const &amp;&amp;</paramtype></parameter><description><para><para>Construction from a temporary object is disabled. </para>
</para></description></function>
<function name="unwrap_ref"><type><classname>unwrap_reference</classname>&lt; T &gt;::type &amp;</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="t"><paramtype>T &amp;</paramtype></parameter><description><para>
<para>Does not throw. </para>
</para></description><returns><para>`unwrap_reference&lt;T&gt;::type&amp;(t)` </para></returns></function>
</namespace>
<macro name="BOOST_REF_CONST"/>
<macro name="BOOST_REF_DELETE"/>
</header>
</library-reference>
