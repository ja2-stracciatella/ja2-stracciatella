[/
          Copyright Oliver Kowalke 2014.
 Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
          http://www.boost.org/LICENSE_1_0.txt
]

[section:performance Performance]

Performance of __boost_coroutine__ was measured on the platforms shown in the
following table. Performance measurements were taken using `rdtsc` and
`boost::chrono::high_resolution_clock`, with overhead corrections, on x86
platforms. In each case, cache warm-up was accounted for, and the one
running thread was pinned to a single CPU.

[table Performance of asymmetric coroutines (using captured_context)
    [
        [Platform]
        [switch]
        [construction (protected stack-allocator)]
        [construction (standard stack-allocator)]
    ]
    [
        [x86_64 (Intel Core2 Q6700, Linux 64bit)]
        [7 ns / 20 cycles]
        [19 \u00b5s / cw6306445402 cycles]
        [10 \u00b5s / 29896 cycles]
    ]
]
[/
[table Performance of asymmetric coroutines (using execution_context)
    [
        [Platform]
        [switch]
        [construction (protected stack-allocator)]
        [construction (standard stack-allocator)]
    ]
    [
        [x86_64 (Intel Core2 Q6700, Linux 64bit)]
        [140 ns / 424 cycles]
        [14 \u00b5s / 32750 cycles]
        [8 \u00b5s / 15313 cycles]
    ]
]
]

[endsect]
