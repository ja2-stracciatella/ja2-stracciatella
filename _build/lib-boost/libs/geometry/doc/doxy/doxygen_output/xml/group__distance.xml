<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="group__distance" kind="group">
    <compoundname>distance</compoundname>
    <title>distance: calculate distance between two geometries</title>
    <innerclass refid="structboost_1_1geometry_1_1comparable__distance__result" prot="public">boost::geometry::comparable_distance_result</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1concept_1_1_point_distance_strategy" prot="public">boost::geometry::concept::PointDistanceStrategy</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1default__comparable__distance__result" prot="public">boost::geometry::default_comparable_distance_result</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1default__distance__result" prot="public">boost::geometry::default_distance_result</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1distance__result" prot="public">boost::geometry::distance_result</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1strategy_1_1distance_1_1services_1_1default__strategy" prot="public">boost::geometry::strategy::distance::services::default_strategy</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__distance_1ga96e975b2491449d359a57a84a03c2a86" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Geometry1</type>
          </param>
          <param>
            <type>typename Geometry2</type>
          </param>
          <param>
            <type>typename Strategy</type>
          </param>
        </templateparamlist>
        <type>comparable_distance_result&lt; Geometry1, Geometry2, Strategy &gt;::type</type>
        <definition>comparable_distance_result&lt;Geometry1, Geometry2, Strategy&gt;::type boost::geometry::comparable_distance</definition>
        <argsstring>(Geometry1 const &amp;geometry1, Geometry2 const &amp;geometry2, Strategy const &amp;strategy)</argsstring>
        <name>comparable_distance</name>
        <param>
          <type>Geometry1 const &amp;</type>
          <declname>geometry1</declname>
        </param>
        <param>
          <type>Geometry2 const &amp;</type>
          <declname>geometry2</declname>
        </param>
        <param>
          <type>Strategy const &amp;</type>
          <declname>strategy</declname>
        </param>
        <briefdescription>
<para>Calculate the comparable distance measurement of two geometries using the specified strategy. </para>        </briefdescription>
        <detaileddescription>
<para>The free function comparable_distance does not necessarily calculate the distance, but it calculates a distance measure such that two distances are comparable to each other. For example: for the Cartesian coordinate system, Pythagoras is used but the square root is not taken, which makes it faster and the results of two point pairs can still be compared to each other. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Geometry1</parametername>
</parameternamelist>
<parameterdescription>
<para>first geometry type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Geometry2</parametername>
</parameternamelist>
<parameterdescription>
<para>second geometry type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Strategy</parametername>
</parameternamelist>
<parameterdescription>
<para>Any type fulfilling a Distance Strategy Concept </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>geometry1</parametername>
</parameternamelist>
<parameterdescription>
<para>A model of the specified concept </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>geometry2</parametername>
</parameternamelist>
<parameterdescription>
<para>A model of the specified concept </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strategy</parametername>
</parameternamelist>
<parameterdescription>
<para>The strategy which will be used for distance calculations </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The calculated \1</para></simplesect>
 <qbk.distinguish>with strategy</qbk.distinguish>  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/boostorg/boost/boost/geometry/algorithms/detail/comparable_distance/interface.hpp" line="320" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/algorithms/detail/comparable_distance/interface.hpp" bodystart="318" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="group__distance_1gabdb5143911178c7e4c78114a785551ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Geometry1</type>
          </param>
          <param>
            <type>typename Geometry2</type>
          </param>
        </templateparamlist>
        <type>default_comparable_distance_result&lt; Geometry1, Geometry2 &gt;::type</type>
        <definition>default_comparable_distance_result&lt;Geometry1, Geometry2&gt;::type boost::geometry::comparable_distance</definition>
        <argsstring>(Geometry1 const &amp;geometry1, Geometry2 const &amp;geometry2)</argsstring>
        <name>comparable_distance</name>
        <param>
          <type>Geometry1 const &amp;</type>
          <declname>geometry1</declname>
        </param>
        <param>
          <type>Geometry2 const &amp;</type>
          <declname>geometry2</declname>
        </param>
        <briefdescription>
<para>Calculate the comparable distance measurement of two geometries. </para>        </briefdescription>
        <detaileddescription>
<para>The free function comparable_distance does not necessarily calculate the distance, but it calculates a distance measure such that two distances are comparable to each other. For example: for the Cartesian coordinate system, Pythagoras is used but the square root is not taken, which makes it faster and the results of two point pairs can still be compared to each other. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Geometry1</parametername>
</parameternamelist>
<parameterdescription>
<para>first geometry type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Geometry2</parametername>
</parameternamelist>
<parameterdescription>
<para>second geometry type </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>geometry1</parametername>
</parameternamelist>
<parameterdescription>
<para>A model of the specified concept </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>geometry2</parametername>
</parameternamelist>
<parameterdescription>
<para>A model of the specified concept </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The calculated \1</para></simplesect>
 <qbk>[include reference/algorithms/comparable_distance.qbk]</qbk>  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/boostorg/boost/boost/geometry/algorithms/detail/comparable_distance/interface.hpp" line="352" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/algorithms/detail/comparable_distance/interface.hpp" bodystart="351" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="group__distance_1ga7d68c34d1ded4428903f906244b31da4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Geometry1</type>
          </param>
          <param>
            <type>typename Geometry2</type>
          </param>
          <param>
            <type>typename Strategy</type>
          </param>
        </templateparamlist>
        <type>distance_result&lt; Geometry1, Geometry2, Strategy &gt;::type</type>
        <definition>distance_result&lt;Geometry1, Geometry2, Strategy&gt;::type boost::geometry::distance</definition>
        <argsstring>(Geometry1 const &amp;geometry1, Geometry2 const &amp;geometry2, Strategy const &amp;strategy)</argsstring>
        <name>distance</name>
        <param>
          <type>Geometry1 const &amp;</type>
          <declname>geometry1</declname>
        </param>
        <param>
          <type>Geometry2 const &amp;</type>
          <declname>geometry2</declname>
        </param>
        <param>
          <type>Strategy const &amp;</type>
          <declname>strategy</declname>
        </param>
        <briefdescription>
<para>Calculate the distance of two geometries using the specified strategy. </para>        </briefdescription>
        <detaileddescription>
<para>The free function area calculates the area of a geometry. using the specified strategy. Reasons to specify a strategy include: use another coordinate system for calculations; construct the strategy beforehand (e.g. with the radius of the Earth); select a strategy when there are more than one available for a calculation.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Geometry1</parametername>
</parameternamelist>
<parameterdescription>
<para>Any type fulfilling a Geometry Concept </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Geometry2</parametername>
</parameternamelist>
<parameterdescription>
<para>Any type fulfilling a Geometry Concept </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Strategy</parametername>
</parameternamelist>
<parameterdescription>
<para>Any type fulfilling a Distance Strategy Concept </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>geometry1</parametername>
</parameternamelist>
<parameterdescription>
<para>A model of the specified concept </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>geometry2</parametername>
</parameternamelist>
<parameterdescription>
<para>A model of the specified concept </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strategy</parametername>
</parameternamelist>
<parameterdescription>
<para>The strategy which will be used for distance calculations </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The calculated \1 </para></simplesect>
<simplesect kind="note"><para>The strategy can be a point-point strategy. In case of distance point-line/point-polygon it may also be a point-segment strategy.</para></simplesect>
 <qbk.distinguish>with strategy</qbk.distinguish> </para><para> <qbk>
[heading Available Strategies]
\* [link geometry.reference.strategies.strategy_distance_pythagoras Pythagoras (cartesian)]
\* [link geometry.reference.strategies.strategy_distance_haversine Haversine (spherical)]
\* [link geometry.reference.strategies.strategy_distance_cross_track Cross track (spherical, point-to-segment)]
\* [link geometry.reference.strategies.strategy_distance_projected_point Projected point (cartesian, point-to-segment)]
\* more (currently extensions): Vincenty, Andoyer (geographic)
</qbk>  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/boostorg/boost/boost/geometry/algorithms/detail/distance/interface.hpp" line="363" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/algorithms/detail/distance/interface.hpp" bodystart="360" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="group__distance_1gad5f5e3da7d38da77c40d7bdad61fee54" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Geometry1</type>
          </param>
          <param>
            <type>typename Geometry2</type>
          </param>
        </templateparamlist>
        <type>default_distance_result&lt; Geometry1, Geometry2 &gt;::type</type>
        <definition>default_distance_result&lt;Geometry1, Geometry2&gt;::type boost::geometry::distance</definition>
        <argsstring>(Geometry1 const &amp;geometry1, Geometry2 const &amp;geometry2)</argsstring>
        <name>distance</name>
        <param>
          <type>Geometry1 const &amp;</type>
          <declname>geometry1</declname>
        </param>
        <param>
          <type>Geometry2 const &amp;</type>
          <declname>geometry2</declname>
        </param>
        <briefdescription>
<para>Calculate the distance of two geometries. </para>        </briefdescription>
        <detaileddescription>
<para>The default strategy is used, corresponding to the coordinate system of the geometries <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Geometry1</parametername>
</parameternamelist>
<parameterdescription>
<para>Any type fulfilling a Geometry Concept </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Geometry2</parametername>
</parameternamelist>
<parameterdescription>
<para>Any type fulfilling a Geometry Concept </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>geometry1</parametername>
</parameternamelist>
<parameterdescription>
<para>A model of the specified concept </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>geometry2</parametername>
</parameternamelist>
<parameterdescription>
<para>A model of the specified concept </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The calculated \1</para></simplesect>
 <qbk>[include reference/algorithms/distance.qbk]</qbk>  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/boostorg/boost/boost/geometry/algorithms/detail/distance/interface.hpp" line="394" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/algorithms/detail/distance/interface.hpp" bodystart="392" bodyend="399"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
