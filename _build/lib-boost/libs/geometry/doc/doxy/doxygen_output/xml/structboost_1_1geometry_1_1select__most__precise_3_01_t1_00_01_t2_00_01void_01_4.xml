<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="structboost_1_1geometry_1_1select__most__precise_3_01_t1_00_01_t2_00_01void_01_4" kind="struct" prot="public">
    <compoundname>boost::geometry::select_most_precise&lt; T1, T2, void &gt;</compoundname>
    <includes local="no">select_most_precise.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T1</type>
      </param>
      <param>
        <type>typename T2</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structboost_1_1geometry_1_1select__most__precise_3_01_t1_00_01_t2_00_01void_01_4_1a29a53f314041223e1eee99597abb0ac9" prot="public" static="no">
        <type>boost::mpl::if_c&lt; <ref refid="structboost_1_1geometry_1_1select__most__precise_3_01_t1_00_01_t2_00_01void_01_4_1a69fccda8c325bdd7172d527b4f41fa5d" kindref="member">one_not_fundamental</ref>, typename detail::select_most_precise::select_non_fundamental&lt; boost::is_fundamental&lt; T1 &gt;::type::value, boost::is_fundamental&lt; T2 &gt;::type::value, T1, T2 &gt;::<ref refid="structboost_1_1geometry_1_1select__most__precise_3_01_t1_00_01_t2_00_01void_01_4_1a29a53f314041223e1eee99597abb0ac9" kindref="member">type</ref>, typename boost::mpl::if_c&lt; <ref refid="structboost_1_1geometry_1_1select__most__precise_3_01_t1_00_01_t2_00_01void_01_4_1aa9d16c6151954943801235e19232681c" kindref="member">both_same</ref>, typename detail::select_most_precise::select_largest&lt; <ref refid="structboost_1_1geometry_1_1select__most__precise_3_01_t1_00_01_t2_00_01void_01_4_1a772f992b9c43b1b74ef0536d022c9c27" kindref="member">second_larger</ref>, T1, T2 &gt;::<ref refid="structboost_1_1geometry_1_1select__most__precise_3_01_t1_00_01_t2_00_01void_01_4_1a29a53f314041223e1eee99597abb0ac9" kindref="member">type</ref>, typename detail::select_most_precise::select_floating_point&lt; boost::is_floating_point&lt; T1 &gt;::type::value, boost::is_floating_point&lt; T2 &gt;::type::value, T1, T2 &gt;::<ref refid="structboost_1_1geometry_1_1select__most__precise_3_01_t1_00_01_t2_00_01void_01_4_1a29a53f314041223e1eee99597abb0ac9" kindref="member">type</ref> &gt;::<ref refid="structboost_1_1geometry_1_1select__most__precise_3_01_t1_00_01_t2_00_01void_01_4_1a29a53f314041223e1eee99597abb0ac9" kindref="member">type</ref> &gt;::<ref refid="structboost_1_1geometry_1_1select__most__precise_3_01_t1_00_01_t2_00_01void_01_4_1a29a53f314041223e1eee99597abb0ac9" kindref="member">type</ref></type>
        <definition>typedef boost::mpl::if_c&lt; one_not_fundamental, typename detail::select_most_precise::select_non_fundamental &lt; boost::is_fundamental&lt;T1&gt;::type::value, boost::is_fundamental&lt;T2&gt;::type::value, T1, T2 &gt;::type, typename boost::mpl::if_c &lt; both_same, typename detail::select_most_precise::select_largest &lt; second_larger, T1, T2 &gt;::type, typename detail::select_most_precise::select_floating_point &lt; boost::is_floating_point&lt;T1&gt;::type::value, boost::is_floating_point&lt;T2&gt;::type::value, T1, T2 &gt;::type &gt;::type &gt;::type boost::geometry::select_most_precise&lt; T1, T2, void &gt;::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/boostorg/boost/boost/geometry/util/select_most_precise.hpp" line="171" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/util/select_most_precise.hpp" bodystart="171" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="structboost_1_1geometry_1_1select__most__precise_3_01_t1_00_01_t2_00_01void_01_4_1aa9d16c6151954943801235e19232681c" prot="public" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool boost::geometry::select_most_precise&lt; T1, T2, void &gt;::both_same</definition>
        <argsstring></argsstring>
        <name>both_same</name>
        <initializer>
        boost::is_floating_point&lt;T1&gt;::type::value
        == boost::is_floating_point&lt;T2&gt;::type::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/boostorg/boost/boost/geometry/util/select_most_precise.hpp" line="142" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/util/select_most_precise.hpp" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structboost_1_1geometry_1_1select__most__precise_3_01_t1_00_01_t2_00_01void_01_4_1a69fccda8c325bdd7172d527b4f41fa5d" prot="public" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool boost::geometry::select_most_precise&lt; T1, T2, void &gt;::one_not_fundamental</definition>
        <argsstring></argsstring>
        <name>one_not_fundamental</name>
        <initializer> !
        (boost::is_fundamental&lt;T1&gt;::type::value
          &amp;&amp; boost::is_fundamental&lt;T2&gt;::type::value)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/boostorg/boost/boost/geometry/util/select_most_precise.hpp" line="138" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/util/select_most_precise.hpp" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structboost_1_1geometry_1_1select__most__precise_3_01_t1_00_01_t2_00_01void_01_4_1a772f992b9c43b1b74ef0536d022c9c27" prot="public" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool boost::geometry::select_most_precise&lt; T1, T2, void &gt;::second_larger</definition>
        <argsstring></argsstring>
        <name>second_larger</name>
        <initializer> sizeof(T2) &gt; sizeof(T1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/boostorg/boost/boost/geometry/util/select_most_precise.hpp" line="135" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/util/select_most_precise.hpp" bodystart="135" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/travis/build/boostorg/boost/boost/geometry/util/select_most_precise.hpp" line="134" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/util/select_most_precise.hpp" bodystart="133" bodyend="172"/>
    <listofallmembers>
      <member refid="structboost_1_1geometry_1_1select__most__precise_3_01_t1_00_01_t2_00_01void_01_4_1aa9d16c6151954943801235e19232681c" prot="public" virt="non-virtual"><scope>boost::geometry::select_most_precise&lt; T1, T2, void &gt;</scope><name>both_same</name></member>
      <member refid="structboost_1_1geometry_1_1select__most__precise_3_01_t1_00_01_t2_00_01void_01_4_1a69fccda8c325bdd7172d527b4f41fa5d" prot="public" virt="non-virtual"><scope>boost::geometry::select_most_precise&lt; T1, T2, void &gt;</scope><name>one_not_fundamental</name></member>
      <member refid="structboost_1_1geometry_1_1select__most__precise_3_01_t1_00_01_t2_00_01void_01_4_1a772f992b9c43b1b74ef0536d022c9c27" prot="public" virt="non-virtual"><scope>boost::geometry::select_most_precise&lt; T1, T2, void &gt;</scope><name>second_larger</name></member>
      <member refid="structboost_1_1geometry_1_1select__most__precise_3_01_t1_00_01_t2_00_01void_01_4_1a29a53f314041223e1eee99597abb0ac9" prot="public" virt="non-virtual"><scope>boost::geometry::select_most_precise&lt; T1, T2, void &gt;</scope><name>type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
