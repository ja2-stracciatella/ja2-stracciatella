<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="structboost_1_1geometry_1_1ever__circling__iterator" kind="struct" prot="public">
    <compoundname>boost::geometry::ever_circling_iterator</compoundname>
    <includes local="no">ever_circling_iterator.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename Iterator</type>
      </param>
    </templateparamlist>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structboost_1_1geometry_1_1ever__circling__iterator_1ac09f73e325921cc50ebcd96bed0f8096" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class boost::iterator_core_access</definition>
        <argsstring></argsstring>
        <name>boost::iterator_core_access</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/boostorg/boost/boost/geometry/iterators/ever_circling_iterator.hpp" line="45" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/iterators/ever_circling_iterator.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structboost_1_1geometry_1_1ever__circling__iterator_1aa2c0fd2e3b0d9078d27fe336e0f33939" prot="private" static="no" mutable="no">
        <type>Iterator</type>
        <definition>Iterator boost::geometry::ever_circling_iterator&lt; Iterator &gt;::m_begin</definition>
        <argsstring></argsstring>
        <name>m_begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/boostorg/boost/boost/geometry/iterators/ever_circling_iterator.hpp" line="93" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/iterators/ever_circling_iterator.hpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structboost_1_1geometry_1_1ever__circling__iterator_1a05b4ddd0df4d652792d6a9c6a2b92360" prot="private" static="no" mutable="no">
        <type>Iterator</type>
        <definition>Iterator boost::geometry::ever_circling_iterator&lt; Iterator &gt;::m_end</definition>
        <argsstring></argsstring>
        <name>m_end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/boostorg/boost/boost/geometry/iterators/ever_circling_iterator.hpp" line="94" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/iterators/ever_circling_iterator.hpp" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structboost_1_1geometry_1_1ever__circling__iterator_1a03427455decf2542cebd73a93b1f4a22" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool boost::geometry::ever_circling_iterator&lt; Iterator &gt;::m_skip_first</definition>
        <argsstring></argsstring>
        <name>m_skip_first</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/boostorg/boost/boost/geometry/iterators/ever_circling_iterator.hpp" line="95" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/iterators/ever_circling_iterator.hpp" bodystart="95" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structboost_1_1geometry_1_1ever__circling__iterator_1ab1bea096782b6bf1071633f7eee446b3" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>boost::geometry::ever_circling_iterator&lt; Iterator &gt;::ever_circling_iterator</definition>
        <argsstring>(Iterator begin, Iterator end, bool skip_first=false)</argsstring>
        <name>ever_circling_iterator</name>
        <param>
          <type>Iterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>Iterator</type>
          <declname>end</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>skip_first</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/boostorg/boost/boost/geometry/iterators/ever_circling_iterator.hpp" line="52" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/iterators/ever_circling_iterator.hpp" bodystart="47" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1geometry_1_1ever__circling__iterator_1a604db6961d67b9ca42e7f6991ae314e2" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>boost::geometry::ever_circling_iterator&lt; Iterator &gt;::ever_circling_iterator</definition>
        <argsstring>(Iterator begin, Iterator end, Iterator start, bool skip_first=false)</argsstring>
        <name>ever_circling_iterator</name>
        <param>
          <type>Iterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>Iterator</type>
          <declname>end</declname>
        </param>
        <param>
          <type>Iterator</type>
          <declname>start</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>skip_first</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/boostorg/boost/boost/geometry/iterators/ever_circling_iterator.hpp" line="61" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/iterators/ever_circling_iterator.hpp" bodystart="56" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1geometry_1_1ever__circling__iterator_1ad7f111e33ea9a06c51e6a4971e920c25" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void boost::geometry::ever_circling_iterator&lt; Iterator &gt;::moveto</definition>
        <argsstring>(Iterator it)</argsstring>
        <name>moveto</name>
        <param>
          <type>Iterator</type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Navigate to a certain position, should be in [start .. end], if at end it will circle again. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/boostorg/boost/boost/geometry/iterators/ever_circling_iterator.hpp" line="68" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/iterators/ever_circling_iterator.hpp" bodystart="67" bodyend="71"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structboost_1_1geometry_1_1ever__circling__iterator_1ad2194d41a1c5a9d3a5901e394067175e" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void boost::geometry::ever_circling_iterator&lt; Iterator &gt;::check_end</definition>
        <argsstring>(bool possibly_skip=true)</argsstring>
        <name>check_end</name>
        <param>
          <type>bool</type>
          <declname>possibly_skip</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/boostorg/boost/boost/geometry/iterators/ever_circling_iterator.hpp" line="82" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/iterators/ever_circling_iterator.hpp" bodystart="81" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1geometry_1_1ever__circling__iterator_1a03d1de62de05ac25c5c9d1cfc369eb2e" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void boost::geometry::ever_circling_iterator&lt; Iterator &gt;::increment</definition>
        <argsstring>(bool possibly_skip=true)</argsstring>
        <name>increment</name>
        <param>
          <type>bool</type>
          <declname>possibly_skip</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/boostorg/boost/boost/geometry/iterators/ever_circling_iterator.hpp" line="76" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/iterators/ever_circling_iterator.hpp" bodystart="75" bodyend="79"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Iterator which ever circles through a range. </para>    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator on which this class is based on</para></parameterdescription>
</parameteritem>
</parameterlist>
If the iterator arrives at range.end() it restarts from the beginning. So it has to be stopped in another way. Don&apos;t call for(....; it++) because it will turn in an endless loop <simplesect kind="note"><para>Name inspired on David Bowie&apos;s &quot;Chant Of The Ever Circling Skeletal Family&quot; </para></simplesect>
</para>    </detaileddescription>
    <location file="/home/travis/build/boostorg/boost/boost/geometry/iterators/ever_circling_iterator.hpp" line="44" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/iterators/ever_circling_iterator.hpp" bodystart="38" bodyend="96"/>
    <listofallmembers>
      <member refid="structboost_1_1geometry_1_1ever__circling__iterator_1ac09f73e325921cc50ebcd96bed0f8096" prot="public" virt="non-virtual"><scope>boost::geometry::ever_circling_iterator</scope><name>boost::iterator_core_access</name></member>
      <member refid="structboost_1_1geometry_1_1ever__circling__iterator_1ad2194d41a1c5a9d3a5901e394067175e" prot="private" virt="non-virtual"><scope>boost::geometry::ever_circling_iterator</scope><name>check_end</name></member>
      <member refid="structboost_1_1geometry_1_1ever__circling__iterator_1ab1bea096782b6bf1071633f7eee446b3" prot="public" virt="non-virtual"><scope>boost::geometry::ever_circling_iterator</scope><name>ever_circling_iterator</name></member>
      <member refid="structboost_1_1geometry_1_1ever__circling__iterator_1a604db6961d67b9ca42e7f6991ae314e2" prot="public" virt="non-virtual"><scope>boost::geometry::ever_circling_iterator</scope><name>ever_circling_iterator</name></member>
      <member refid="structboost_1_1geometry_1_1ever__circling__iterator_1a03d1de62de05ac25c5c9d1cfc369eb2e" prot="private" virt="non-virtual"><scope>boost::geometry::ever_circling_iterator</scope><name>increment</name></member>
      <member refid="structboost_1_1geometry_1_1ever__circling__iterator_1aa2c0fd2e3b0d9078d27fe336e0f33939" prot="private" virt="non-virtual"><scope>boost::geometry::ever_circling_iterator</scope><name>m_begin</name></member>
      <member refid="structboost_1_1geometry_1_1ever__circling__iterator_1a05b4ddd0df4d652792d6a9c6a2b92360" prot="private" virt="non-virtual"><scope>boost::geometry::ever_circling_iterator</scope><name>m_end</name></member>
      <member refid="structboost_1_1geometry_1_1ever__circling__iterator_1a03427455decf2542cebd73a93b1f4a22" prot="private" virt="non-virtual"><scope>boost::geometry::ever_circling_iterator</scope><name>m_skip_first</name></member>
      <member refid="structboost_1_1geometry_1_1ever__circling__iterator_1ad7f111e33ea9a06c51e6a4971e920c25" prot="public" virt="non-virtual"><scope>boost::geometry::ever_circling_iterator</scope><name>moveto</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
