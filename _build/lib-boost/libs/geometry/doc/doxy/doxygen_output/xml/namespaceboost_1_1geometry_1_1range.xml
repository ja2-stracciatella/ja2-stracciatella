<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="namespaceboost_1_1geometry_1_1range" kind="namespace">
    <compoundname>boost::geometry::range</compoundname>
    <innerclass refid="classboost_1_1geometry_1_1range_1_1back__insert__iterator" prot="public">boost::geometry::range::back_insert_iterator</innerclass>
    <innernamespace refid="namespaceboost_1_1geometry_1_1range_1_1detail">boost::geometry::range::detail</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1range_1a4ad466c509adc226f312c16c66e5a841" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RandomAccessRange</type>
          </param>
        </templateparamlist>
        <type>boost::range_reference&lt; RandomAccessRange const  &gt;::type</type>
        <definition>boost::range_reference&lt;RandomAccessRange const&gt;::type boost::geometry::range::at</definition>
        <argsstring>(RandomAccessRange const &amp;rng, typename boost::range_size&lt; RandomAccessRange const  &gt;::type i)</argsstring>
        <name>at</name>
        <param>
          <type>RandomAccessRange const &amp;</type>
          <declname>rng</declname>
        </param>
        <param>
          <type>typename boost::range_size&lt; RandomAccessRange const  &gt;::type</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Short utility to conveniently return an element of a RandomAccessRange. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/boostorg/boost/boost/geometry/util/range.hpp" line="94" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/util/range.hpp" bodystart="92" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1range_1a37def58f63100487876db185b77b41c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RandomAccessRange</type>
          </param>
        </templateparamlist>
        <type>boost::range_reference&lt; RandomAccessRange &gt;::type</type>
        <definition>boost::range_reference&lt;RandomAccessRange&gt;::type boost::geometry::range::at</definition>
        <argsstring>(RandomAccessRange &amp;rng, typename boost::range_size&lt; RandomAccessRange &gt;::type i)</argsstring>
        <name>at</name>
        <param>
          <type>RandomAccessRange &amp;</type>
          <declname>rng</declname>
        </param>
        <param>
          <type>typename boost::range_size&lt; RandomAccessRange &gt;::type</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Short utility to conveniently return an element of a RandomAccessRange. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/boostorg/boost/boost/geometry/util/range.hpp" line="107" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/util/range.hpp" bodystart="105" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1range_1a181e2238f79cfae182b635ad43b514a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BidirectionalRange</type>
          </param>
        </templateparamlist>
        <type>boost::range_reference&lt; BidirectionalRange const  &gt;::type</type>
        <definition>boost::range_reference&lt;BidirectionalRange const&gt;::type boost::geometry::range::back</definition>
        <argsstring>(BidirectionalRange const &amp;rng)</argsstring>
        <name>back</name>
        <param>
          <type>BidirectionalRange const &amp;</type>
          <declname>rng</declname>
        </param>
        <briefdescription>
<para>Short utility to conveniently return the back element of a BidirectionalRange. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/boostorg/boost/boost/geometry/util/range.hpp" line="145" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/util/range.hpp" bodystart="144" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1range_1a8f5be2b44372f48d92fa02bf989f750a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BidirectionalRange</type>
          </param>
        </templateparamlist>
        <type>boost::range_reference&lt; BidirectionalRange &gt;::type</type>
        <definition>boost::range_reference&lt;BidirectionalRange&gt;::type boost::geometry::range::back</definition>
        <argsstring>(BidirectionalRange &amp;rng)</argsstring>
        <name>back</name>
        <param>
          <type>BidirectionalRange &amp;</type>
          <declname>rng</declname>
        </param>
        <briefdescription>
<para>Short utility to conveniently return the back element of a BidirectionalRange. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/boostorg/boost/boost/geometry/util/range.hpp" line="158" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/util/range.hpp" bodystart="157" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1range_1a1e6b151e65be317d5cfaadfd26f5135e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Range</type>
          </param>
        </templateparamlist>
        <type><ref refid="classboost_1_1geometry_1_1range_1_1back__insert__iterator" kindref="compound">back_insert_iterator</ref>&lt; Range &gt;</type>
        <definition>back_insert_iterator&lt;Range&gt; boost::geometry::range::back_inserter</definition>
        <argsstring>(Range &amp;rng)</argsstring>
        <name>back_inserter</name>
        <param>
          <type>Range &amp;</type>
          <declname>rng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/boostorg/boost/boost/geometry/util/range.hpp" line="412" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/util/range.hpp" bodystart="411" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1range_1a7496ac429d8e4663e63cba08b2ebbbc5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Range</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void boost::geometry::range::clear</definition>
        <argsstring>(Range &amp;rng)</argsstring>
        <name>clear</name>
        <param>
          <type>Range &amp;</type>
          <declname>rng</declname>
        </param>
        <briefdescription>
<para>Short utility to conveniently clear a mutable range. It uses traits::clear&lt;&gt;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/boostorg/boost/boost/geometry/util/range.hpp" line="172" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/util/range.hpp" bodystart="171" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1range_1ad94cb3604f7519262f2e3c91a71c70b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Range</type>
          </param>
        </templateparamlist>
        <type>boost::range_iterator&lt; Range &gt;::type</type>
        <definition>boost::range_iterator&lt; Range &gt;::type boost::geometry::range::erase</definition>
        <argsstring>(Range &amp;rng, typename boost::range_iterator&lt; Range &gt;::type it)</argsstring>
        <name>erase</name>
        <param>
          <type>Range &amp;</type>
          <declname>rng</declname>
        </param>
        <param>
          <type>typename boost::range_iterator&lt; Range &gt;::type</type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>Short utility to conveniently remove an element from a mutable range. It uses std::copy() and <ref refid="namespaceboost_1_1geometry_1_1range_1a1bfbc6465449dd9c05df14247e6ec7da" kindref="member">resize()</ref>. Version taking mutable iterators. </para>        </briefdescription>
        <detaileddescription>
<para>Short utility to conveniently remove an element from a mutable range. It uses std::copy() and <ref refid="namespaceboost_1_1geometry_1_1range_1a1bfbc6465449dd9c05df14247e6ec7da" kindref="member">resize()</ref>. Version taking non-mutable iterators. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/boostorg/boost/boost/geometry/util/range.hpp" line="269" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/util/range.hpp" bodystart="267" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1range_1a885ee36338c8d06af3d513d31c827ec6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Range</type>
          </param>
        </templateparamlist>
        <type>boost::range_iterator&lt; Range &gt;::type</type>
        <definition>boost::range_iterator&lt; Range &gt;::type boost::geometry::range::erase</definition>
        <argsstring>(Range &amp;rng, typename boost::range_iterator&lt; Range &gt;::type first, typename boost::range_iterator&lt; Range &gt;::type last)</argsstring>
        <name>erase</name>
        <param>
          <type>Range &amp;</type>
          <declname>rng</declname>
        </param>
        <param>
          <type>typename boost::range_iterator&lt; Range &gt;::type</type>
          <declname>first</declname>
        </param>
        <param>
          <type>typename boost::range_iterator&lt; Range &gt;::type</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Short utility to conveniently remove a range of elements from a mutable range. It uses std::copy() and <ref refid="namespaceboost_1_1geometry_1_1range_1a1bfbc6465449dd9c05df14247e6ec7da" kindref="member">resize()</ref>. Version taking mutable iterators. </para>        </briefdescription>
        <detaileddescription>
<para>Short utility to conveniently remove a range of elements from a mutable range. It uses std::copy() and <ref refid="namespaceboost_1_1geometry_1_1range_1a1bfbc6465449dd9c05df14247e6ec7da" kindref="member">resize()</ref>. Version taking non-mutable iterators. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/boostorg/boost/boost/geometry/util/range.hpp" line="321" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/util/range.hpp" bodystart="318" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1range_1ab5ead3456620abff836da1e9db3131e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Range</type>
          </param>
        </templateparamlist>
        <type>boost::range_reference&lt; Range const  &gt;::type</type>
        <definition>boost::range_reference&lt;Range const&gt;::type boost::geometry::range::front</definition>
        <argsstring>(Range const &amp;rng)</argsstring>
        <name>front</name>
        <param>
          <type>Range const &amp;</type>
          <declname>rng</declname>
        </param>
        <briefdescription>
<para>Short utility to conveniently return the front element of a Range. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/boostorg/boost/boost/geometry/util/range.hpp" line="119" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/util/range.hpp" bodystart="118" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1range_1a8e9c1776a685d572121fe56c754f7f99" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Range</type>
          </param>
        </templateparamlist>
        <type>boost::range_reference&lt; Range &gt;::type</type>
        <definition>boost::range_reference&lt;Range&gt;::type boost::geometry::range::front</definition>
        <argsstring>(Range &amp;rng)</argsstring>
        <name>front</name>
        <param>
          <type>Range &amp;</type>
          <declname>rng</declname>
        </param>
        <briefdescription>
<para>Short utility to conveniently return the front element of a Range. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/boostorg/boost/boost/geometry/util/range.hpp" line="131" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/util/range.hpp" bodystart="130" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1range_1a3ea08d8b2ff99dbdae56d5d950c45325" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Range</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void boost::geometry::range::pop_back</definition>
        <argsstring>(Range &amp;rng)</argsstring>
        <name>pop_back</name>
        <param>
          <type>Range &amp;</type>
          <declname>rng</declname>
        </param>
        <briefdescription>
<para>Short utility to conveniently remove an element from the back of a mutable range. It uses <ref refid="namespaceboost_1_1geometry_1_1range_1a1bfbc6465449dd9c05df14247e6ec7da" kindref="member">resize()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/boostorg/boost/boost/geometry/util/range.hpp" line="209" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/util/range.hpp" bodystart="208" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1range_1a94e3e9292b920b02e5dd708c1513988c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RandomAccessRange</type>
          </param>
        </templateparamlist>
        <type>boost::range_iterator&lt; RandomAccessRange const  &gt;::type</type>
        <definition>boost::range_iterator&lt;RandomAccessRange const&gt;::type boost::geometry::range::pos</definition>
        <argsstring>(RandomAccessRange const &amp;rng, typename boost::range_size&lt; RandomAccessRange const  &gt;::type i)</argsstring>
        <name>pos</name>
        <param>
          <type>RandomAccessRange const &amp;</type>
          <declname>rng</declname>
        </param>
        <param>
          <type>typename boost::range_size&lt; RandomAccessRange const  &gt;::type</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Short utility to conveniently return an iterator of a RandomAccessRange. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/boostorg/boost/boost/geometry/util/range.hpp" line="68" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/util/range.hpp" bodystart="66" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1range_1a9c320c4f30f14532601736cd1148cd1b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RandomAccessRange</type>
          </param>
        </templateparamlist>
        <type>boost::range_iterator&lt; RandomAccessRange &gt;::type</type>
        <definition>boost::range_iterator&lt;RandomAccessRange&gt;::type boost::geometry::range::pos</definition>
        <argsstring>(RandomAccessRange &amp;rng, typename boost::range_size&lt; RandomAccessRange &gt;::type i)</argsstring>
        <name>pos</name>
        <param>
          <type>RandomAccessRange &amp;</type>
          <declname>rng</declname>
        </param>
        <param>
          <type>typename boost::range_size&lt; RandomAccessRange &gt;::type</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Short utility to conveniently return an iterator of a RandomAccessRange. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/boostorg/boost/boost/geometry/util/range.hpp" line="81" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/util/range.hpp" bodystart="79" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1range_1aa7dcc5c6473c511ccf0d74c7eb998a27" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Range</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void boost::geometry::range::push_back</definition>
        <argsstring>(Range &amp;rng, typename boost::range_value&lt; Range &gt;::type const &amp;value)</argsstring>
        <name>push_back</name>
        <param>
          <type>Range &amp;</type>
          <declname>rng</declname>
        </param>
        <param>
          <type>typename boost::range_value&lt; Range &gt;::type const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Short utility to conveniently insert a new element at the end of a mutable range. It uses boost::geometry::traits::push_back&lt;&gt;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/boostorg/boost/boost/geometry/util/range.hpp" line="185" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/util/range.hpp" bodystart="183" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1geometry_1_1range_1a1bfbc6465449dd9c05df14247e6ec7da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Range</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void boost::geometry::range::resize</definition>
        <argsstring>(Range &amp;rng, typename boost::range_size&lt; Range &gt;::type new_size)</argsstring>
        <name>resize</name>
        <param>
          <type>Range &amp;</type>
          <declname>rng</declname>
        </param>
        <param>
          <type>typename boost::range_size&lt; Range &gt;::type</type>
          <declname>new_size</declname>
        </param>
        <briefdescription>
<para>Short utility to conveniently resize a mutable range. It uses boost::geometry::traits::resize&lt;&gt;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/boostorg/boost/boost/geometry/util/range.hpp" line="197" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/util/range.hpp" bodystart="195" bodyend="199"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/travis/build/boostorg/boost/boost/geometry/util/range.hpp" line="38"/>
  </compounddef>
</doxygen>
