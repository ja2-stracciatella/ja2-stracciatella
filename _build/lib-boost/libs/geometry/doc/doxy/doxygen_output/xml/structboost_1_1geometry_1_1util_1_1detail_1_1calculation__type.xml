<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="structboost_1_1geometry_1_1util_1_1detail_1_1calculation__type" kind="struct" prot="public">
    <compoundname>boost::geometry::util::detail::calculation_type</compoundname>
    <includes local="no">calculation_type.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>Type</declname>
        <defname>Type</defname>
      </param>
      <param>
        <type>typename</type>
        <declname>CalculationType</declname>
        <defname>CalculationType</defname>
      </param>
      <param>
        <type>typename</type>
        <declname>DefaultFloatingPointCalculationType</declname>
        <defname>DefaultFloatingPointCalculationType</defname>
      </param>
      <param>
        <type>typename</type>
        <declname>DefaultIntegralCalculationType</declname>
        <defname>DefaultIntegralCalculationType</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structboost_1_1geometry_1_1util_1_1detail_1_1calculation__type_1a673ec602f46dfda0ae39830d7e507010" prot="public" static="no">
        <type>boost::mpl::if_&lt; boost::is_void&lt; CalculationType &gt;, typename boost::mpl::if_&lt; boost::is_floating_point&lt; Type &gt;, typename <ref refid="structboost_1_1geometry_1_1select__most__precise" kindref="compound">select_most_precise</ref>&lt; DefaultFloatingPointCalculationType, Type &gt;::<ref refid="structboost_1_1geometry_1_1util_1_1detail_1_1calculation__type_1a673ec602f46dfda0ae39830d7e507010" kindref="member">type</ref>, typename <ref refid="structboost_1_1geometry_1_1select__most__precise" kindref="compound">select_most_precise</ref>&lt; DefaultIntegralCalculationType, Type &gt;::<ref refid="structboost_1_1geometry_1_1util_1_1detail_1_1calculation__type_1a673ec602f46dfda0ae39830d7e507010" kindref="member">type</ref> &gt;::<ref refid="structboost_1_1geometry_1_1util_1_1detail_1_1calculation__type_1a673ec602f46dfda0ae39830d7e507010" kindref="member">type</ref>, CalculationType &gt;::<ref refid="structboost_1_1geometry_1_1util_1_1detail_1_1calculation__type_1a673ec602f46dfda0ae39830d7e507010" kindref="member">type</ref></type>
        <definition>typedef boost::mpl::if_&lt; boost::is_void&lt;CalculationType&gt;, typename boost::mpl::if_ &lt; boost::is_floating_point&lt;Type&gt;, typename select_most_precise &lt; DefaultFloatingPointCalculationType, Type &gt;::type, typename select_most_precise &lt; DefaultIntegralCalculationType, Type &gt;::type &gt;::type, CalculationType &gt;::type boost::geometry::util::detail::calculation_type&lt; Type, CalculationType, DefaultFloatingPointCalculationType, DefaultIntegralCalculationType &gt;::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/boostorg/boost/boost/geometry/util/calculation_type.hpp" line="90" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/util/calculation_type.hpp" bodystart="90" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structboost_1_1geometry_1_1util_1_1detail_1_1calculation__type_1a44bd601a79bb7b76861830ac403fb45b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>boost::geometry::util::detail::calculation_type&lt; Type, CalculationType, DefaultFloatingPointCalculationType, DefaultIntegralCalculationType &gt;::BOOST_STATIC_ASSERT</definition>
        <argsstring>((boost::is_fundamental&lt; DefaultFloatingPointCalculationType &gt;::type::value))</argsstring>
        <name>BOOST_STATIC_ASSERT</name>
        <param>
          <type>(boost::is_fundamental&lt; DefaultFloatingPointCalculationType &gt;::type::value)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/boostorg/boost/boost/geometry/util/calculation_type.hpp" line="63"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1geometry_1_1util_1_1detail_1_1calculation__type_1afff77c37a92957d4e3b0cf8306c4a36c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>boost::geometry::util::detail::calculation_type&lt; Type, CalculationType, DefaultFloatingPointCalculationType, DefaultIntegralCalculationType &gt;::BOOST_STATIC_ASSERT</definition>
        <argsstring>((boost::is_fundamental&lt; DefaultIntegralCalculationType &gt;::type::value))</argsstring>
        <name>BOOST_STATIC_ASSERT</name>
        <param>
          <type>(boost::is_fundamental&lt; DefaultIntegralCalculationType &gt;::type::value)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/boostorg/boost/boost/geometry/util/calculation_type.hpp" line="69"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Selects the most appropriate:<itemizedlist>
<listitem><para>if calculation type is specified (not void), that one is used</para></listitem><listitem><para>else if type is non-fundamental (user defined e.g. ttmath), that one</para></listitem><listitem><para>else if type is floating point, the specified default FP is used</para></listitem><listitem><para>else it is integral and the specified default integral is used </para></listitem></itemizedlist>
</para>    </detaileddescription>
    <location file="/home/travis/build/boostorg/boost/boost/geometry/util/calculation_type.hpp" line="57" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/util/calculation_type.hpp" bodystart="56" bodyend="91"/>
    <listofallmembers>
      <member refid="structboost_1_1geometry_1_1util_1_1detail_1_1calculation__type_1a44bd601a79bb7b76861830ac403fb45b" prot="public" virt="non-virtual"><scope>boost::geometry::util::detail::calculation_type</scope><name>BOOST_STATIC_ASSERT</name></member>
      <member refid="structboost_1_1geometry_1_1util_1_1detail_1_1calculation__type_1afff77c37a92957d4e3b0cf8306c4a36c" prot="public" virt="non-virtual"><scope>boost::geometry::util::detail::calculation_type</scope><name>BOOST_STATIC_ASSERT</name></member>
      <member refid="structboost_1_1geometry_1_1util_1_1detail_1_1calculation__type_1a673ec602f46dfda0ae39830d7e507010" prot="public" virt="non-virtual"><scope>boost::geometry::util::detail::calculation_type</scope><name>type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
