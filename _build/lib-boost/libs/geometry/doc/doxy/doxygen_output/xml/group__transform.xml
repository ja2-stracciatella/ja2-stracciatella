<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="group__transform" kind="group">
    <compoundname>transform</compoundname>
    <title>transform: apply transformations on geometries</title>
    <innerclass refid="structboost_1_1geometry_1_1strategy_1_1transform_1_1copy__direct" prot="public">boost::geometry::strategy::transform::copy_direct</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1strategy_1_1transform_1_1copy__per__coordinate" prot="public">boost::geometry::strategy::transform::copy_per_coordinate</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1strategy_1_1transform_1_1degree__radian__vv" prot="public">boost::geometry::strategy::transform::degree_radian_vv</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1strategy_1_1transform_1_1from__cartesian__3__to__spherical__polar__2" prot="public">boost::geometry::strategy::transform::from_cartesian_3_to_spherical_polar_2</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1strategy_1_1transform_1_1from__cartesian__3__to__spherical__polar__3" prot="public">boost::geometry::strategy::transform::from_cartesian_3_to_spherical_polar_3</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1strategy_1_1transform_1_1from__spherical__polar__2__to__cartesian__3" prot="public">boost::geometry::strategy::transform::from_spherical_polar_2_to_cartesian_3</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1strategy_1_1transform_1_1from__spherical__polar__3__to__cartesian__3" prot="public">boost::geometry::strategy::transform::from_spherical_polar_3_to_cartesian_3</innerclass>
    <innerclass refid="structboost_1_1geometry_1_1strategy_1_1transform_1_1services_1_1default__strategy" prot="public">boost::geometry::strategy::transform::services::default_strategy</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__transform_1ga396a7207dc2e9dbc3c15c1c174e0e5a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Geometry1</type>
          </param>
          <param>
            <type>typename Geometry2</type>
          </param>
          <param>
            <type>typename Strategy</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::geometry::transform</definition>
        <argsstring>(Geometry1 const &amp;geometry1, Geometry2 &amp;geometry2, Strategy const &amp;strategy)</argsstring>
        <name>transform</name>
        <param>
          <type>Geometry1 const &amp;</type>
          <declname>geometry1</declname>
        </param>
        <param>
          <type>Geometry2 &amp;</type>
          <declname>geometry2</declname>
        </param>
        <param>
          <type>Strategy const &amp;</type>
          <declname>strategy</declname>
        </param>
        <briefdescription>
<para>Transforms from one geometry to another geometry using the specified strategy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Geometry1</parametername>
</parameternamelist>
<parameterdescription>
<para>Any type fulfilling a Geometry Concept </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Geometry2</parametername>
</parameternamelist>
<parameterdescription>
<para>Any type fulfilling a Geometry Concept </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Strategy</parametername>
</parameternamelist>
<parameterdescription>
<para>strategy </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>geometry1</parametername>
</parameternamelist>
<parameterdescription>
<para>A model of the specified concept </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>geometry2</parametername>
</parameternamelist>
<parameterdescription>
<para>A model of the specified concept </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strategy</parametername>
</parameternamelist>
<parameterdescription>
<para>The strategy to be used for transformation </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the transformation could be done</para></simplesect>
 <qbk.distinguish>with strategy</qbk.distinguish> </para><para> <qbk>[include reference/algorithms/transform_with_strategy.qbk]</qbk>  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/boostorg/boost/boost/geometry/algorithms/transform.hpp" line="453" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/algorithms/transform.hpp" bodystart="451" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="group__transform_1ga5f8dab51e6972613f20878beb34feb36" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Geometry1</type>
          </param>
          <param>
            <type>typename Geometry2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool boost::geometry::transform</definition>
        <argsstring>(Geometry1 const &amp;geometry1, Geometry2 &amp;geometry2)</argsstring>
        <name>transform</name>
        <param>
          <type>Geometry1 const &amp;</type>
          <declname>geometry1</declname>
        </param>
        <param>
          <type>Geometry2 &amp;</type>
          <declname>geometry2</declname>
        </param>
        <briefdescription>
<para>Transforms from one geometry to another geometry using a strategy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Geometry1</parametername>
</parameternamelist>
<parameterdescription>
<para>Any type fulfilling a Geometry Concept </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Geometry2</parametername>
</parameternamelist>
<parameterdescription>
<para>Any type fulfilling a Geometry Concept </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>geometry1</parametername>
</parameternamelist>
<parameterdescription>
<para>A model of the specified concept </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>geometry2</parametername>
</parameternamelist>
<parameterdescription>
<para>A model of the specified concept </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the transformation could be done</para></simplesect>
 <qbk>[include reference/algorithms/transform.qbk]</qbk>  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/boostorg/boost/boost/geometry/algorithms/transform.hpp" line="472" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/algorithms/transform.hpp" bodystart="471" bodyend="474"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
