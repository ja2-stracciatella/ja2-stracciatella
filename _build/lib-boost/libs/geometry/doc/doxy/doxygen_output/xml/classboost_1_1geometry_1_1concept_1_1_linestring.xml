<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="classboost_1_1geometry_1_1concept_1_1_linestring" kind="class" prot="public">
    <compoundname>boost::geometry::concept::Linestring</compoundname>
    <includes local="no">linestring_concept.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename Geometry</type>
      </param>
    </templateparamlist>
    <briefdescription>
<para><ref refid="classboost_1_1geometry_1_1concept_1_1_linestring" kindref="compound">Linestring</ref> concept. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="par"><title>Formal definition:</title><para>The linestring concept is defined as following:<itemizedlist>
<listitem><para>there must be a specialization of <ref refid="structboost_1_1geometry_1_1traits_1_1tag" kindref="compound">traits::tag</ref> defining <ref refid="structboost_1_1geometry_1_1linestring__tag" kindref="compound">linestring_tag</ref> as type</para></listitem><listitem><para>it must behave like a Boost.Range</para></listitem><listitem><para>it must implement a std::back_insert_iterator<itemizedlist>
<listitem><para>either by implementing push_back</para></listitem><listitem><para>or by specializing std::back_insert_iterator</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="note"><para>to fulfill the concepts, no traits class has to be specialized to define the point type.</para></simplesect>
<simplesect kind="par"><title>Example:</title><para></para></simplesect>
A custom linestring, defining the necessary specializations to fulfill to the concept.</para><para>Suppose that the following linestring is defined:  <programlisting><codeline><highlight class="keyword">struct<sp/></highlight><highlight class="normal">custom_linestring1<sp/>:<sp/>std::deque&lt;P&gt;</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para><para>It can then be adapted to the concept as following:  <programlisting><codeline><highlight class="comment">//<sp/>adapt<sp/>custom_linestring1</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">boost<sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">geometry<sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">traits</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tag&lt;<sp/>custom_linestring1&lt;P&gt;<sp/>&gt;<sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>linestring_tag<sp/>type;<sp/>};</highlight></codeline>
<codeline><highlight class="normal">}}}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>boost::geometry::traits</highlight></codeline>
</programlisting></para><para><simplesect kind="note"><para><itemizedlist>
<listitem><para>There is also the registration macro BOOST_GEOMETRY_REGISTER_LINESTRING</para></listitem><listitem><para>For registration of std::vector&lt;P&gt; (and deque, and list) it is enough to include the header-file geometries/adapted/std_as_linestring.hpp. That registers a vector as a linestring (so it cannot be registered as a linear ring then, in the same source code). </para></listitem></itemizedlist>
</para></simplesect>
</para>    </detaileddescription>
    <location file="/home/travis/build/boostorg/boost/boost/geometry/geometries/concepts/linestring_concept.hpp" line="75" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/geometries/concepts/linestring_concept.hpp" bodystart="74" bodyend="93"/>
    <listofallmembers>
    </listofallmembers>
  </compounddef>
</doxygen>
