<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="structboost_1_1geometry_1_1select__most__precise" kind="struct" prot="public">
    <compoundname>boost::geometry::select_most_precise</compoundname>
    <includes local="no">select_most_precise.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T1</declname>
        <defname>T1</defname>
      </param>
      <param>
        <type>typename</type>
        <declname>T2</declname>
        <defname>T2</defname>
        <defval>void</defval>
      </param>
      <param>
        <type>typename</type>
        <declname>T3</declname>
        <defname>T3</defname>
        <defval>void</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structboost_1_1geometry_1_1select__most__precise_1adcdc2e39793696fe62d24b1ad8235207" prot="public" static="no">
        <type><ref refid="structboost_1_1geometry_1_1select__most__precise" kindref="compound">select_most_precise</ref>&lt; typename <ref refid="structboost_1_1geometry_1_1select__most__precise" kindref="compound">select_most_precise</ref>&lt; T1, T2 &gt;::<ref refid="structboost_1_1geometry_1_1select__most__precise_1adcdc2e39793696fe62d24b1ad8235207" kindref="member">type</ref>, T3 &gt;::<ref refid="structboost_1_1geometry_1_1select__most__precise_1adcdc2e39793696fe62d24b1ad8235207" kindref="member">type</ref></type>
        <definition>typedef select_most_precise&lt; typename select_most_precise&lt;T1, T2&gt;::type, T3 &gt;::type boost::geometry::select_most_precise&lt; T1, T2, T3 &gt;::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/boostorg/boost/boost/geometry/util/select_most_precise.hpp" line="129" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/util/select_most_precise.hpp" bodystart="129" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Meta-function to select, of two types, the most accurate type for calculations. </para>    </briefdescription>
    <detaileddescription>
<para><ref refid="structboost_1_1geometry_1_1select__most__precise" kindref="compound">select_most_precise</ref> classes, compares two types on compile time. For example, if an addition must be done with a double and an integer, the result must be a double. If both types are integer, the result can be an integer. <simplesect kind="note"><para>It is different from the &quot;promote&quot; class, already in boost. That class promotes e.g. a (one) float to a double. This class selects a type from two types. It takes the most accurate, but does not promote afterwards. </para><simplesectsep/><para>This traits class is completely independant from GGL and might be a separate addition to Boost </para><simplesectsep/><para>If the input is a non-fundamental type, it might be a calculation type such as a GMP-value or another high precision value. Therefore, if one is non-fundamental, that one is chosen. </para><simplesectsep/><para>If both types are non-fundamental, the result is indeterminate and currently the first one is chosen. </para></simplesect>
</para>    </detaileddescription>
    <location file="/home/travis/build/boostorg/boost/boost/geometry/util/select_most_precise.hpp" line="124" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/util/select_most_precise.hpp" bodystart="123" bodyend="130"/>
    <listofallmembers>
      <member refid="structboost_1_1geometry_1_1select__most__precise_1adcdc2e39793696fe62d24b1ad8235207" prot="public" virt="non-virtual"><scope>boost::geometry::select_most_precise</scope><name>type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
