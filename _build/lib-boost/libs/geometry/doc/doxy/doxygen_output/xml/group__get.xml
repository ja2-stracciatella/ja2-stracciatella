<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="group__get" kind="group">
    <compoundname>get</compoundname>
    <title>get: get geometries</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__get_1ga6f2549aa15489bdfa2e0ee28c620ab07" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>Dimension</declname>
            <defname>Dimension</defname>
          </param>
          <param>
            <type>typename Geometry</type>
          </param>
        </templateparamlist>
        <type>coordinate_type&lt; Geometry &gt;::type</type>
        <definition>coordinate_type&lt;Geometry&gt;::type boost::geometry::get</definition>
        <argsstring>(Geometry const &amp;geometry)</argsstring>
        <name>get</name>
        <param>
          <type>Geometry const &amp;</type>
          <declname>geometry</declname>
        </param>
        <briefdescription>
<para>Get coordinate value of a geometry (usually a point) </para>        </briefdescription>
        <detaileddescription>
<para>The free functions [*get] and [*set] are two of the most important functions of Boost.Geometry, both within the library, as also for the library user. With these two functions you normally get and set coordinate values from and for a point, box, segment or sphere.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Dimension</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimension, this template parameter is required. Should contain \[0 .. n-1\] for an n-dimensional geometry </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Geometry</parametername>
</parameternamelist>
<parameterdescription>
<para>Any type fulfilling a Geometry Concept (usually a Point Concept) </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>geometry</parametername>
</parameternamelist>
<parameterdescription>
<para>A model of the specified concept (usually a point) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The coordinate value of specified dimension of specified geometry</para></simplesect>
 <qbk>[include reference/core/get_point.qbk]</qbk>  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/boostorg/boost/boost/geometry/core/access.hpp" line="274" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/core/access.hpp" bodystart="269" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="group__get_1gabf9ceb2655358244b0348cef1f308288" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>Index</declname>
            <defname>Index</defname>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>Dimension</declname>
            <defname>Dimension</defname>
          </param>
          <param>
            <type>typename Geometry</type>
          </param>
        </templateparamlist>
        <type>coordinate_type&lt; Geometry &gt;::type</type>
        <definition>coordinate_type&lt;Geometry&gt;::type boost::geometry::get</definition>
        <argsstring>(Geometry const &amp;geometry)</argsstring>
        <name>get</name>
        <param>
          <type>Geometry const &amp;</type>
          <declname>geometry</declname>
        </param>
        <briefdescription>
<para>get coordinate value of a Box or Segment </para>        </briefdescription>
        <detaileddescription>
<para>The free functions [*get] and [*set] are two of the most important functions of Boost.Geometry, both within the library, as also for the library user. With these two functions you normally get and set coordinate values from and for a point, box, segment or sphere. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index, this template parameter is required. For a Box: either min_corner or max_corner. For a Segment: either 0 or 1 for first or last point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Dimension</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimension, this template parameter is required. Should contain \[0 .. n-1\] for an n-dimensional geometry </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Geometry</parametername>
</parameternamelist>
<parameterdescription>
<para>Any type fulfilling a Box Concept or a Segment Concept </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>geometry</parametername>
</parameternamelist>
<parameterdescription>
<para>A model of the specified concept </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>coordinate value</para></simplesect>
 <qbk.distinguish>with index</qbk.distinguish>   <qbk>[include reference/core/get_box.qbk]</qbk>  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/boostorg/boost/boost/geometry/core/access.hpp" line="344" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/core/access.hpp" bodystart="339" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="group__get_1ga599e31cfc2d3b5074bc3ac4cf24b9152" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>Dimension</declname>
            <defname>Dimension</defname>
          </param>
          <param>
            <type>typename Geometry</type>
          </param>
        </templateparamlist>
        <type>fp_coordinate_type&lt; Geometry &gt;::type</type>
        <definition>fp_coordinate_type&lt;Geometry&gt;::type boost::geometry::get_as_radian</definition>
        <argsstring>(Geometry const &amp;geometry)</argsstring>
        <name>get_as_radian</name>
        <param>
          <type>Geometry const &amp;</type>
          <declname>geometry</declname>
        </param>
        <briefdescription>
<para>get coordinate value of a point, result is in Radian </para>        </briefdescription>
        <detaileddescription>
<para>Result is in Radian, even if source coordinate system is in Degrees <simplesect kind="return"><para>coordinate value</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Dimension</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Geometry</parametername>
</parameternamelist>
<parameterdescription>
<para>geometry </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>geometry</parametername>
</parameternamelist>
<parameterdescription>
<para>geometry to get coordinate value from </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Only applicable to coordinate systems templatized by units, e.g. spherical or geographic coordinate systems </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/boostorg/boost/boost/geometry/core/radian_access.hpp" line="128" bodyfile="/home/travis/build/boostorg/boost/boost/geometry/core/radian_access.hpp" bodystart="127" bodyend="131"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
