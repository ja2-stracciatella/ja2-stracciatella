cmake_minimum_required (VERSION 2.8)

## Some macros

macro(add_custom_templated_target NAME)
    configure_file(
            "${CMAKE_CURRENT_SOURCE_DIR}/cmake/target-${NAME}.cmake.in"
            "${CMAKE_CURRENT_BINARY_DIR}/cmake/target-${NAME}.cmake"
            IMMEDIATE @ONLY)

    add_custom_target(${NAME}
            COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake/target-${NAME}.cmake)
endmacro()

## Project Setup

project (ja2-stracciatella)
set(JA2_BINARY "ja2")
set(LAUNCHER_BINARY "ja2-launcher")

## Versioning

set(ja2-stracciatella_VERSION_MAJOR "0")
set(ja2-stracciatella_VERSION_MINOR "15")
set(ja2-stracciatella_VERSION_PATCH "x")
set(ja2-stracciatella_VERSION "${ja2-stracciatella_VERSION_MAJOR}.${ja2-stracciatella_VERSION_MINOR}.${ja2-stracciatella_VERSION_PATCH}")
set(GAME_VERSION "v${ja2-stracciatella_VERSION}")

## Meta Information
set(CONTACT "JA2 Stracciatella Team <no-email@ja2-stracciatella.github.io>")
set(DESCRIPTION "An improved, cross-platform, stable Jagged Alliance 2 runtime.")

## Options

set(EXTRA_DATA_DIR "" CACHE STRING "Directory for externalized data")
set(LOCAL_SDL_LIB "" CACHE STRING "Use local SDL library from this directory")
option(LOCAL_BOOST_LIB "Build with local boost lib" OFF)
option(LOCAL_FLTK_LIB "Build with local fltk lib" OFF)
option(WITH_UNITTESTS "Build with unittests" ON)
option(WITH_FIXMES "Build with fixme messages" OFF)
option(WITH_MAEMO "Build with right click mapped to F4 (menu button)" OFF)

## Build

set(BUILD_SHARED_LIBS OFF CACHE BOOL "")
set(CFLAGS "${CFLAGS} -DJA2 -DGAME_VERSION=\\\"${GAME_VERSION}\\\" -DMICROINI_STATIC")

if (EXTRA_DATA_DIR STREQUAL "")
    set(CFLAGS "${CFLAGS} -DEXTRA_DATA_DIR=\\\"\\\"")
else()
    message(STATUS "Setting extra data dir to" "${EXTRA_DATA_DIR}")
    set(CFLAGS "${CFLAGS} -DEXTRA_DATA_DIR=\\\"${EXTRA_DATA_DIR}\\\"")
endif()

if (WITH_FIXMES)
    message(STATUS "Building with fixme messages" )
    set(CFLAGS "${CFLAGS} -DWITH_FIXMES")
endif()

if (WITH_MAEMO)
    message(STATUS "Building with right click mapped to F4 (menu button)" )
    set(CFLAGS "${CFLAGS} -DWITH_MAEMO")
endif()

if (WITH_SOUND_DEBUG)
    message(STATUS "Building with sound debug" )
    set(CFLAGS "${CFLAGS} -DWITH_SOUND_DEBUG")
endif()

if (NOT (LOCAL_SDL_LIB STREQUAL ""))
    message( STATUS "Using local SDL from " "${CMAKE_CURRENT_SOURCE_DIR}/${LOCAL_SDL_LIB}")
    set(CMAKE_PREFIX_PATH "${CMAKE_CURRENT_SOURCE_DIR}/${LOCAL_SDL_LIB}")
endif()
find_package(SDL REQUIRED)

if (NOT LOCAL_BOOST_LIB)
    find_package(Boost REQUIRED COMPONENTS filesystem system)
else()
    message(STATUS "Compiling with local Boost libraries from ${CMAKE_CURRENT_SOURCE_DIR}/_build/lib-boost" )
    add_subdirectory("_build/lib-boost")
    set(Boost_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/_build/lib-boost")
    set(Boost_LIBRARIES "boost")
endif()

if (NOT LOCAL_FLTK_LIB)
    find_package(FLTK REQUIRED)
else()
    message(STATUS "Compiling with local Boost libraries from ${CMAKE_CURRENT_SOURCE_DIR}/_build/lib-boost" )
    set(FLTK_FLUID_EXECUTABLE fluid)
    set(OPTION_BUILD_EXAMPLES OFF)
    set(OPTION_USE_GL OFF)
    set(OPTION_USE_SYSTEM_ZLIB OFF)
    set(OPTION_USE_SYSTEM_LIBJPEG OFF)
    set(OPTION_USE_SYSTEM_LIBPNG OFF)
    add_subdirectory("_build/lib-fltk")
    set(FLTK_LIBRARIES fltk)
endif()

set(JA2_INCLUDES "")
set(JA2_SOURCES "")
add_subdirectory("${CMAKE_CURRENT_SOURCE_DIR}/Build")
add_subdirectory("${CMAKE_CURRENT_SOURCE_DIR}/sgp")
add_subdirectory("${CMAKE_CURRENT_SOURCE_DIR}/src")
add_subdirectory("_build/lib-MicroIni")
add_subdirectory("_build/lib-slog")
add_subdirectory("_build/lib-smacker")

set(LAUNCHER_INCLUDES ${CMAKE_CURRENT_SOURCE_DIR}/sgp)
set(LAUNCHER_SOURCES
    ${CMAKE_CURRENT_SOURCE_DIR}/sgp/FileMan.h
    ${CMAKE_CURRENT_SOURCE_DIR}/sgp/FileMan.cc
    ${CMAKE_CURRENT_SOURCE_DIR}/sgp/LibraryDataBase.h
    ${CMAKE_CURRENT_SOURCE_DIR}/sgp/LibraryDataBase.cc
    ${CMAKE_CURRENT_SOURCE_DIR}/sgp/MemMan.h
    ${CMAKE_CURRENT_SOURCE_DIR}/sgp/MemMan.cc
)
add_subdirectory("${CMAKE_CURRENT_SOURCE_DIR}/src/launcher")

include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}
    ${JA2_INCLUDES}
    ${LAUNCHER_INCLUDES}
    ${CMAKE_CURRENT_SOURCE_DIR}/_build/lib-MicroIni/include
    ${CMAKE_CURRENT_SOURCE_DIR}/_build/lib-rapidjson
    ${CMAKE_CURRENT_SOURCE_DIR}/_build/lib-slog
    ${CMAKE_CURRENT_SOURCE_DIR}/_build/lib-smacker/libsmacker
    ${CMAKE_CURRENT_SOURCE_DIR}/_build/lib-utf8cpp/source
    ${SDL_INCLUDE_DIR}
    ${Boost_INCLUDE_DIRS}
)

foreach(FILE ${JA2_SOURCES})
  get_filename_component(PARENT_DIR "${FILE}" PATH)
  file(RELATIVE_PATH GROUP "${CMAKE_CURRENT_SOURCE_DIR}" "${PARENT_DIR}")
  string(REPLACE "/" "\\" GROUP "${GROUP}")
  source_group("${GROUP}" FILES "${FILE}")
endforeach()

if (WITH_UNITTESTS)
    message(STATUS "Compiling with unittests" )

    add_subdirectory("_build/lib-gtest")
    set(lib-gtest "gtest")
    set(CFLAGS "${CFLAGS} -DWITH_UNITTESTS")

    include_directories(
        ${CMAKE_CURRENT_SOURCE_DIR}/_build/lib-gtest/include
        ${CMAKE_CURRENT_SOURCE_DIR}/_build/lib-gtest
    )
endif()

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CFLAGS}")
add_executable(${JA2_BINARY} ${JA2_SOURCES})
target_link_libraries(${JA2_BINARY} ${SDL_LIBRARY} ${Boost_LIBRARIES} ${lib-gtest} MicroIni slog smacker)

fltk_wrap_ui(launcherUi src/launcher/StracciatellaLauncher.fl)
add_library(launcherUi STATIC ${launcherUi_FLTK_UI_SRCS})
add_executable(${LAUNCHER_BINARY} ${LAUNCHER_SOURCES})
target_link_libraries(${LAUNCHER_BINARY} launcherUi ${FLTK_LIBRARIES} ${Boost_LIBRARIES} ${lib-gtest} MicroIni slog)

macro(copy_dir_to_ja2_binary_after_build DIR)
    add_custom_command(TARGET ${JA2_BINARY} POST_BUILD
            COMMAND ${CMAKE_COMMAND} -E copy_directory
            ${CMAKE_CURRENT_SOURCE_DIR}/${DIR} "$<TARGET_FILE_DIR:${JA2_BINARY}>/${DIR}")
endmacro()

copy_dir_to_ja2_binary_after_build("externalized")
copy_dir_to_ja2_binary_after_build("_unittests")
copy_dir_to_ja2_binary_after_build("mods")

if (MSVC)
    string(REPLACE "SDLmain.lib" "SDL.dll" SDL_DLL ${SDLMAIN_LIBRARY})
    add_custom_command(TARGET ${JA2_BINARY} POST_BUILD
            COMMAND ${CMAKE_COMMAND} -E copy
            ${SDL_DLL} "$<TARGET_FILE_DIR:${JA2_BINARY}>")
endif()

## Installing and Packaging

set(CPACK_PACKAGE_VERSION_MAJOR ${ja2-stracciatella_VERSION_MAJOR})
set(CPACK_PACKAGE_VERSION_MINOR ${ja2-stracciatella_VERSION_MINOR})
set(CPACK_PACKAGE_VERSION_PATCH ${ja2-stracciatella_VERSION_PATCH})
set(CPACK_PACKAGE_VERSION ${ja2-stracciatella_VERSION})
set(CPACK_PACKAGE_CONTACT ${CONTACT})
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ${DESCRIPTION})
set(CPACK_PACKAGE_DESCRIPTION ${DESCRIPTION})

set(CPACK_DEBIAN_PACKAGE_SECTION "games")
set(CPACK_DEBIAN_PACKAGE_HOMEPAGE "https://ja2-stracciatella.github.io/")
set(CPACK_DEBIAN_PACKAGE_DEPENDS "libsdl1.2debian, libstdc++6, libgcc1, libc6")

if(UNIX AND NOT MINGW AND NOT APPLE)
    if(CMAKE_SIZEOF_VOID_P EQUAL 8)
        set(PACKAGE_ARCH "amd64")
    else()
        set(PACKAGE_ARCH "i386")
    endif()
elseif(MINGW)
    set(PACKAGE_ARCH "win-mingw")
elseif(APPLE)
    set(PACKAGE_ARCH "macos")
else()
    set(PACKAGE_ARCH "unknown")
endif()
set(CPACK_PACKAGE_FILE_NAME "${PROJECT_NAME}_${CPACK_PACKAGE_VERSION}_${PACKAGE_ARCH}")

include(CPack)

if (UNIX AND NOT MINGW AND NOT APPLE)
    install(TARGETS ${JA2_BINARY} RUNTIME DESTINATION bin)
    install(TARGETS ${LAUNCHER_BINARY} RUNTIME DESTINATION bin)
    install(DIRECTORY externalized mods _unittests DESTINATION share/ja2)
    install(FILES _build/distr-files-linux/ja2-stracciatella.desktop DESTINATION share/applications)
    install(
        FILES _build/icons/logo.svg
        RENAME ja2-stracciatella.svg
        DESTINATION share/icons/hicolor/scalable/apps)
    install(FILES ja2_manpage DESTINATION share/man/man6/ja2.6)
else()
    install(TARGETS ${JA2_BINARY} RUNTIME DESTINATION .)
    install(TARGETS ${LAUNCHER_BINARY} RUNTIME DESTINATION .)
    install(DIRECTORY externalized mods _unittests DESTINATION .)
    install(FILES changes.md DESTINATION .)
endif()

if (MINGW)
    file(GLOB WIN_MINGW_DIST_DLLS "_build/distr-files-win-mingw/*.dll")
    install(FILES ${WIN_MINGW_DIST_DLLS} DESTINATION .)
endif()

if(WIN32 OR MINGW)
    file(GLOB WIN_DIST_FILES "_build/distr-files-win/*")
    install(FILES ${WIN_DIST_FILES} DESTINATION .)
    install(FILES _build/icons/logo.ico DESTINATION .)
    install(FILES _build/lib-SDL-devel-1.2.15-mingw32/bin/SDL.dll DESTINATION .)
endif()

if(APPLE)
    file(GLOB APPLE_DIST_FILES "_build/distr-files-mac/*")
    install(FILES ${APPLE_DIST_FILES} DESTINATION .)
    install(FILES _build/icons/logo.icns DESTINATION .)
endif()

add_custom_templated_target("uninstall")

## Release building

macro(add_vagrant_build_target NAME BOX TARGET ARGS)
    add_custom_target(${NAME})
    add_custom_command(TARGET ${NAME}
            COMMAND vagrant up && vagrant ssh -c "sh /tmp/ja2-stracciatella/_build/buildboxes/common/build.sh '${TARGET}' '${ARGS}'" && vagrant halt
            WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/_build/buildboxes/${BOX})
endmacro(add_vagrant_build_target)

add_vagrant_build_target(
        "build-deb-package-on-u1404_amd64"
        "u1404_amd64"
        "package"
        "-DCMAKE_INSTALL_PREFIX=/usr -DEXTRA_DATA_DIR=/usr/share/ja2 -DLOCAL_BOOST_LIB=ON -DCPACK_GENERATOR=DEB"
)
add_vagrant_build_target(
        "build-deb-package-on-u1404_i386"
        "u1404_i386"
        "package"
        "-DCMAKE_INSTALL_PREFIX=/usr -DEXTRA_DATA_DIR=/usr/share/ja2 -DLOCAL_BOOST_LIB=ON -DCPACK_GENERATOR=DEB"
)
add_vagrant_build_target(
        "build-win-release-on-u1404_amd64"
        "u1404_amd64"
        "package"
        "-DCMAKE_TOOLCHAIN_FILE=./cmake/toolchain-mingw.cmake -DCPACK_GENERATOR=\"ZIP;NSIS\""
)
if(APPLE)
    # This can only be executed on macOS since it is not legally allowed to run the VM on any other OS
    add_vagrant_build_target(
            "build-macos-release"
            "macos"
            "package"
            "-DCMAKE_TOOLCHAIN_FILE=./cmake/toolchain-macos.cmake -DCPACK_GENERATOR=\"ZIP\""
    )
endif()
add_vagrant_build_target(
        "check-compilation-on-freebsd10"
        "freebsd-10.2"
        "all"
        ""
)
add_vagrant_build_target(
        "check-compilation-on-openbsd59"
        "openbsd-5.9"
        "all"
        ""
)


add_custom_target(build-releases)
add_custom_command(
    TARGET build-releases
    COMMAND make build-deb-package-on-u1404_amd64
    COMMAND make build-deb-package-on-u1404_i386
    COMMAND make build-win-release-on-u1404_amd64
    COMMAND make check-compilation-on-freebsd10
    COMMAND make check-compilation-on-openbsd59
)

## Rebuilding contributors.txt

add_custom_templated_target("rebuild-contributors-list")
